#+STARTUP: showeverything
#+TITLE:   Multisensor NER Mapping
#+AUTHOR:  vladimir.alexiev@ontotext.com
#+DATE:    2014-12-05
#+OPTIONS: H:5 num:t toc:t \n:nil @:t ::t |:t ^:{} -:t f:t *:t <:t
#+OPTIONS: TeX:nil LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc

* Prefixes
#+BEGIN_SRC ttl :name prefixes
@prefix dbo:      <http://dbpedia.org/ontology/>.
@prefix dbp:      <http://dbpedia.org/resource/>.
@prefix dc:       <http://purl.org/dc/elements/1.1/>.
@prefix foaf:     <http://xmlns.com/foaf/0.1/>.
@prefix itsrdf:   <http://www.w3.org/2005/11/its/rdf#>.
@prefix nerd:     <http://nerd.eurecom.fr/ontology#>.
@prefix nif:      <http://persistence.uni-leipzig.org/nlp2rdf/ontologies/nif-core#>.
@prefix rdau:     <http://rdaregistry.info/Elements/u/>.
@prefix schema:   <http://schema.org/>.
@prefix time:     <http://www.w3.org/2006/time#>.   # seeAlso http://www.w3.org/TR/owl-time
@prefix xsd:      <http://www.w3.org/2001/XMLSchema#>.
@prefix yago:     <http://dbpedia.org/class/yago/> .
#+END_SRC

* Mapping
| *Class* /Property | *Type/enum*      | *Mapping*                                              | *Notes*                                                     |
|-------------------+------------------+--------------------------------------------------------+-------------------------------------------------------------|
| *all*             |                  | nif:Word or nif:Phrase                                 |                                                             |
| text              | string           | n/a                                                    | nif:anchorOf omitted                                        |
| onset             | number           | nif:beginIndex                                         | start                                                       |
| offset            | number           | nif:endIndex                                           | end                                                         |
| *Person*          |                  | dbo:Person, foaf:Person; nerd:Person                   |                                                             |
| test              | string           | foaf:name                                              |                                                             |
| firstname         | string           | foaf:firstName                                         |                                                             |
| lastname          | string           | foaf:lastName                                          |                                                             |
| gender            | male, female     | dbo:gender                                             | dbp:Male, dbp:Female                                        |
| occupation        | string           | rdau:professionOrOccupation                            | dbo:occupation and dbo:profession are object props          |
| *Location*        | type=other       | nerd:Location                                          | No need to use dbo:Location if you can't identify the type  |
| *Location*        | type=country     | dbo:Country; nerd:Country                              |                                                             |
| *Location*        | type=region      | dbo:Region; nerd:AdministrativeRegion                  |                                                             |
| *Location*        | type=city        | dbo:City; nerd:City                                    |                                                             |
| *Location*        | type=street      | schema:PostalAddress; nerd:Location                    | Put text in schema:streetAddress                            |
| *Organisation*    | type=institution | dbo:Organisation, foaf:Organization; nerd:Organization |                                                             |
| *Organisation*    | type=company     | dbo:Company, foaf:Company; nerd:Company                |                                                             |
| *Product*         |                  | nerd:Product                                           |                                                             |
| type              | string           | not yet                                                | don't know yet what makes sense here                        |
| *Time*            |                  | time:Instant; nerd:Time                                | TODO: can you parse to XSD datetime components?             |
| year              | string           | time:Instant; nerd:Time                                |                                                             |
| month             | string           | time:Instant OR yago:Months; nerd:Time                 | if yago:Months then dbp:January...                          |
| day               | string           | time:Instant; nerd:Time                                |                                                             |
| time              | string           | time:Instant; nerd:Time                                |                                                             |
| weekday           | string           | yago:DaysOfTheWeek; nerd:Time                          | dbp:Sunday,... Put text in rdfs:label                       |
| rel               | string           | nerd:Time                                              | relative expression, eg "the last three days"               |
| other             | string           | nerd:Time                                              | any other time expression, eg "Valentine's day"             |
| *Amount*          | type=price       | schema:PriceSpecification; nerd:Amount                 |                                                             |
| unit              | string           | schema:priceCurrency                                   | 3-letter ISO 4217 format                                    |
| amount            | number           | schema:price                                           | "." as decimal separator                                    |
| *Amount*          | type=unit        | schema:QuantitativeValue; nerd:Amount                  | How about percentage??                                      |
| unit              | string           | schema:unitCode                                        | Strictly speaking, UN/CEFACT Common Code (eg GRM for grams) |
| amount            | number           | schema:value                                           |                                                             |
| *Name*            |                  | nerd:Thing                                             |                                                             |
| type              | string           | dc:type                                                | a type if anything can be identified, otherwise empty       |

Notes
- Classes are uppercase, Properties are lowercase
- NERD classes are attached to the word using itsrdf:taClassRef
- Other classes are attached to the NE node (itsrdf:taIdentRef) using rdf:type.
- the Amount mapping uses schema.org classes/properties, which were borrowed from GoodRelations
- dbo:gender is an object property, though it doesn't specify the values to use
- dc:type is a literal. We attach it to the word directly
- don't forget to include itsrdf:taAnnotatorsRef "NER-extraction|http://linguatec.com" for each

* Example
[[NIF-example3.ttl]] ([[NIF-example3.ttl.html]]) and [[NIF-example3.jsonld]] include examples for each of the named entity kinds.
- We use "local entity URIs" but of course it's better to use DBpedia URIs if they can be
  found (as explained in [[NIF-example2.ttl]])
- We use entity URIs made from the entity text, replacing punctuation with "_". But this
  may be insufficient, since the same text could mean different entities (if the NER can
  detect such situations)
- We make up some word/phrase occurrences. We use nif:anchorOf to illustrate the
  word/phrase, and omit nif:beginIndex and nif:endIndex. In actual use, you'll do exactly
  the opposite (nif:anchorOf should be omitted since it's redundant)
- In a couple cases I've embedded rdfs:comment and rdfs:seeAlso to illustrate a point. Of
  course, don't emit such in the actual JSONLD
